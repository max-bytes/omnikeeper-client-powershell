#
# Landscape omnikeeper REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER FromCIID
No description available.
.PARAMETER ToCIID
No description available.
.PARAMETER PredicateID
No description available.
.OUTPUTS

RelatedCIDTO<PSCustomObject>
#>

function Initialize-OKRelatedCIDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FromCIID},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ToCIID},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PredicateID}
    )

    Process {
        'Creating PSCustomObject: okclient => OKRelatedCIDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $FromCIID) {
            throw "invalid value for 'FromCIID', 'FromCIID' cannot be null."
        }

        if ($null -eq $ToCIID) {
            throw "invalid value for 'ToCIID', 'ToCIID' cannot be null."
        }

        if ($null -eq $PredicateID) {
            throw "invalid value for 'PredicateID', 'PredicateID' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "fromCIID" = ${FromCIID}
            "toCIID" = ${ToCIID}
            "predicateID" = ${PredicateID}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RelatedCIDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to RelatedCIDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RelatedCIDTO<PSCustomObject>
#>
function ConvertFrom-OKJsonToRelatedCIDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: okclient => OKRelatedCIDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OKRelatedCIDTO
        $AllProperties = ("fromCIID", "toCIID", "predicateID")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'fromCIID' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fromCIID"))) {
            throw "Error! JSON cannot be serialized due to the required property 'fromCIID' missing."
        } else {
            $FromCIID = $JsonParameters.PSobject.Properties["fromCIID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "toCIID"))) {
            throw "Error! JSON cannot be serialized due to the required property 'toCIID' missing."
        } else {
            $ToCIID = $JsonParameters.PSobject.Properties["toCIID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "predicateID"))) {
            throw "Error! JSON cannot be serialized due to the required property 'predicateID' missing."
        } else {
            $PredicateID = $JsonParameters.PSobject.Properties["predicateID"].value
        }

        $PSO = [PSCustomObject]@{
            "fromCIID" = ${FromCIID}
            "toCIID" = ${ToCIID}
            "predicateID" = ${PredicateID}
        }

        return $PSO
    }

}

