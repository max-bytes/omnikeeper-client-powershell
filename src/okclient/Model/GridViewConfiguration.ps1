#
# Landscape omnikeeper REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ShowCIIDColumn
No description available.
.PARAMETER WriteLayer
No description available.
.PARAMETER ReadLayerset
No description available.
.PARAMETER Columns
No description available.
.PARAMETER Trait
No description available.
.OUTPUTS

GridViewConfiguration<PSCustomObject>
#>

function Initialize-OKGridViewConfiguration {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ShowCIIDColumn},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${WriteLayer},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ReadLayerset},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Columns},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Trait}
    )

    Process {
        'Creating PSCustomObject: okclient => OKGridViewConfiguration' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "showCIIDColumn" = ${ShowCIIDColumn}
            "writeLayer" = ${WriteLayer}
            "readLayerset" = ${ReadLayerset}
            "columns" = ${Columns}
            "trait" = ${Trait}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GridViewConfiguration<PSCustomObject>

.DESCRIPTION

Convert from JSON to GridViewConfiguration<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GridViewConfiguration<PSCustomObject>
#>
function ConvertFrom-OKJsonToGridViewConfiguration {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: okclient => OKGridViewConfiguration' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OKGridViewConfiguration
        $AllProperties = ("showCIIDColumn", "writeLayer", "readLayerset", "columns", "trait")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "showCIIDColumn"))) { #optional property not found
            $ShowCIIDColumn = $null
        } else {
            $ShowCIIDColumn = $JsonParameters.PSobject.Properties["showCIIDColumn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "writeLayer"))) { #optional property not found
            $WriteLayer = $null
        } else {
            $WriteLayer = $JsonParameters.PSobject.Properties["writeLayer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "readLayerset"))) { #optional property not found
            $ReadLayerset = $null
        } else {
            $ReadLayerset = $JsonParameters.PSobject.Properties["readLayerset"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "columns"))) { #optional property not found
            $Columns = $null
        } else {
            $Columns = $JsonParameters.PSobject.Properties["columns"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "trait"))) { #optional property not found
            $Trait = $null
        } else {
            $Trait = $JsonParameters.PSobject.Properties["trait"].value
        }

        $PSO = [PSCustomObject]@{
            "showCIIDColumn" = ${ShowCIIDColumn}
            "writeLayer" = ${WriteLayer}
            "readLayerset" = ${ReadLayerset}
            "columns" = ${Columns}
            "trait" = ${Trait}
        }

        return $PSO
    }

}

