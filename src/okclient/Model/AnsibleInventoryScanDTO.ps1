#
# Landscape omnikeeper REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER SetupFacts
No description available.
.PARAMETER YumInstalled
No description available.
.PARAMETER YumRepos
No description available.
.PARAMETER YumUpdates
No description available.
.OUTPUTS

AnsibleInventoryScanDTO<PSCustomObject>
#>

function Initialize-OKAnsibleInventoryScanDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${SetupFacts},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${YumInstalled},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${YumRepos},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${YumUpdates}
    )

    Process {
        'Creating PSCustomObject: okclient => OKAnsibleInventoryScanDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($SetupFacts -eq $null) {
            throw "invalid value for 'SetupFacts', 'SetupFacts' cannot be null."
        }

        if ($YumInstalled -eq $null) {
            throw "invalid value for 'YumInstalled', 'YumInstalled' cannot be null."
        }

        if ($YumRepos -eq $null) {
            throw "invalid value for 'YumRepos', 'YumRepos' cannot be null."
        }

        if ($YumUpdates -eq $null) {
            throw "invalid value for 'YumUpdates', 'YumUpdates' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "setupFacts" = ${SetupFacts}
            "yumInstalled" = ${YumInstalled}
            "yumRepos" = ${YumRepos}
            "yumUpdates" = ${YumUpdates}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AnsibleInventoryScanDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to AnsibleInventoryScanDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AnsibleInventoryScanDTO<PSCustomObject>
#>
function ConvertFrom-OKJsonToAnsibleInventoryScanDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: okclient => OKAnsibleInventoryScanDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OKAnsibleInventoryScanDTO
        $AllProperties = ("setupFacts", "yumInstalled", "yumRepos", "yumUpdates")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'setupFacts' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "setupFacts"))) {
            throw "Error! JSON cannot be serialized due to the required property 'setupFacts' missing."
        } else {
            $SetupFacts = $JsonParameters.PSobject.Properties["setupFacts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "yumInstalled"))) {
            throw "Error! JSON cannot be serialized due to the required property 'yumInstalled' missing."
        } else {
            $YumInstalled = $JsonParameters.PSobject.Properties["yumInstalled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "yumRepos"))) {
            throw "Error! JSON cannot be serialized due to the required property 'yumRepos' missing."
        } else {
            $YumRepos = $JsonParameters.PSobject.Properties["yumRepos"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "yumUpdates"))) {
            throw "Error! JSON cannot be serialized due to the required property 'yumUpdates' missing."
        } else {
            $YumUpdates = $JsonParameters.PSobject.Properties["yumUpdates"].value
        }

        $PSO = [PSCustomObject]@{
            "setupFacts" = ${SetupFacts}
            "yumInstalled" = ${YumInstalled}
            "yumRepos" = ${YumRepos}
            "yumUpdates" = ${YumUpdates}
        }

        return $PSO
    }

}

