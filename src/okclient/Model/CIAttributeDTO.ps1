#
# Landscape omnikeeper REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Name
No description available.
.PARAMETER Value
No description available.
.PARAMETER Ciid
No description available.
.PARAMETER State
No description available.
.OUTPUTS

CIAttributeDTO<PSCustomObject>
#>

function Initialize-OKCIAttributeDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Value},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Ciid},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${State}
    )

    Process {
        'Creating PSCustomObject: okclient => OKCIAttributeDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Id -eq $null) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($Name -eq $null) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($Value -eq $null) {
            throw "invalid value for 'Value', 'Value' cannot be null."
        }

        if ($Ciid -eq $null) {
            throw "invalid value for 'Ciid', 'Ciid' cannot be null."
        }

        if ($State -eq $null) {
            throw "invalid value for 'State', 'State' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "value" = ${Value}
            "ciid" = ${Ciid}
            "state" = ${State}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CIAttributeDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to CIAttributeDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CIAttributeDTO<PSCustomObject>
#>
function ConvertFrom-OKJsonToCIAttributeDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: okclient => OKCIAttributeDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OKCIAttributeDTO
        $AllProperties = ("id", "name", "value", "ciid", "state")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value"))) {
            throw "Error! JSON cannot be serialized due to the required property 'value' missing."
        } else {
            $Value = $JsonParameters.PSobject.Properties["value"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ciid"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ciid' missing."
        } else {
            $Ciid = $JsonParameters.PSobject.Properties["ciid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) {
            throw "Error! JSON cannot be serialized due to the required property 'state' missing."
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "value" = ${Value}
            "ciid" = ${Ciid}
            "state" = ${State}
        }

        return $PSO
    }

}

