#
# Landscape omnikeeper REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER FromCIID
No description available.
.PARAMETER ToCIID
No description available.
.PARAMETER PredicateID
No description available.
.PARAMETER Predicate
No description available.
.PARAMETER State
No description available.
.OUTPUTS

RelationDTO<PSCustomObject>
#>

function Initialize-OKRelationDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FromCIID},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ToCIID},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PredicateID},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Predicate},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${State}
    )

    Process {
        'Creating PSCustomObject: okclient => OKRelationDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Id -eq $null) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($FromCIID -eq $null) {
            throw "invalid value for 'FromCIID', 'FromCIID' cannot be null."
        }

        if ($ToCIID -eq $null) {
            throw "invalid value for 'ToCIID', 'ToCIID' cannot be null."
        }

        if ($PredicateID -eq $null) {
            throw "invalid value for 'PredicateID', 'PredicateID' cannot be null."
        }

        if ($Predicate -eq $null) {
            throw "invalid value for 'Predicate', 'Predicate' cannot be null."
        }

        if ($State -eq $null) {
            throw "invalid value for 'State', 'State' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "fromCIID" = ${FromCIID}
            "toCIID" = ${ToCIID}
            "predicateID" = ${PredicateID}
            "predicate" = ${Predicate}
            "state" = ${State}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RelationDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to RelationDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RelationDTO<PSCustomObject>
#>
function ConvertFrom-OKJsonToRelationDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: okclient => OKRelationDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OKRelationDTO
        $AllProperties = ("id", "fromCIID", "toCIID", "predicateID", "predicate", "state")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fromCIID"))) {
            throw "Error! JSON cannot be serialized due to the required property 'fromCIID' missing."
        } else {
            $FromCIID = $JsonParameters.PSobject.Properties["fromCIID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "toCIID"))) {
            throw "Error! JSON cannot be serialized due to the required property 'toCIID' missing."
        } else {
            $ToCIID = $JsonParameters.PSobject.Properties["toCIID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "predicateID"))) {
            throw "Error! JSON cannot be serialized due to the required property 'predicateID' missing."
        } else {
            $PredicateID = $JsonParameters.PSobject.Properties["predicateID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "predicate"))) {
            throw "Error! JSON cannot be serialized due to the required property 'predicate' missing."
        } else {
            $Predicate = $JsonParameters.PSobject.Properties["predicate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) {
            throw "Error! JSON cannot be serialized due to the required property 'state' missing."
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "fromCIID" = ${FromCIID}
            "toCIID" = ${ToCIID}
            "predicateID" = ${PredicateID}
            "predicate" = ${Predicate}
            "state" = ${State}
        }

        return $PSO
    }

}

