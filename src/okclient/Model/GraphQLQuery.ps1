#
# Landscape omnikeeper REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER OperationName
No description available.
.PARAMETER Query
No description available.
.PARAMETER Variables
No description available.
.OUTPUTS

GraphQLQuery<PSCustomObject>
#>

function Initialize-OKGraphQLQuery {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OperationName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Query},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${Variables}
    )

    Process {
        'Creating PSCustomObject: okclient => OKGraphQLQuery' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "operationName" = ${OperationName}
            "query" = ${Query}
            "variables" = ${Variables}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GraphQLQuery<PSCustomObject>

.DESCRIPTION

Convert from JSON to GraphQLQuery<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GraphQLQuery<PSCustomObject>
#>
function ConvertFrom-OKJsonToGraphQLQuery {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: okclient => OKGraphQLQuery' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OKGraphQLQuery
        $AllProperties = ("operationName", "query", "variables")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "operationName"))) { #optional property not found
            $OperationName = $null
        } else {
            $OperationName = $JsonParameters.PSobject.Properties["operationName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "query"))) { #optional property not found
            $Query = $null
        } else {
            $Query = $JsonParameters.PSobject.Properties["query"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "variables"))) { #optional property not found
            $Variables = $null
        } else {
            $Variables = $JsonParameters.PSobject.Properties["variables"].value
        }

        $PSO = [PSCustomObject]@{
            "operationName" = ${OperationName}
            "query" = ${Query}
            "variables" = ${Variables}
        }

        return $PSO
    }

}

