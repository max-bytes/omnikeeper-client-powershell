#
# Landscape omnikeeper REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Type
No description available.
.PARAMETER AppliesTo
No description available.
.PARAMETER DefaultValue
No description available.
.PARAMETER SchemaElementKind
No description available.
.PARAMETER Namespace
No description available.
.PARAMETER Name
No description available.
.OUTPUTS

IEdmTerm<PSCustomObject>
#>

function Initialize-OKIEdmTerm {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Type},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppliesTo},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DefaultValue},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("None", "TypeDefinition", "Term", "Action", "EntityContainer", "Function")]
        [PSCustomObject]
        ${SchemaElementKind},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Namespace},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name}
    )

    Process {
        'Creating PSCustomObject: okclient => OKIEdmTerm' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "appliesTo" = ${AppliesTo}
            "defaultValue" = ${DefaultValue}
            "schemaElementKind" = ${SchemaElementKind}
            "namespace" = ${Namespace}
            "name" = ${Name}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IEdmTerm<PSCustomObject>

.DESCRIPTION

Convert from JSON to IEdmTerm<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IEdmTerm<PSCustomObject>
#>
function ConvertFrom-OKJsonToIEdmTerm {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: okclient => OKIEdmTerm' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OKIEdmTerm
        $AllProperties = ("type", "appliesTo", "defaultValue", "schemaElementKind", "namespace", "name")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "appliesTo"))) { #optional property not found
            $AppliesTo = $null
        } else {
            $AppliesTo = $JsonParameters.PSobject.Properties["appliesTo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultValue"))) { #optional property not found
            $DefaultValue = $null
        } else {
            $DefaultValue = $JsonParameters.PSobject.Properties["defaultValue"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "schemaElementKind"))) { #optional property not found
            $SchemaElementKind = $null
        } else {
            $SchemaElementKind = $JsonParameters.PSobject.Properties["schemaElementKind"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "namespace"))) { #optional property not found
            $Namespace = $null
        } else {
            $Namespace = $JsonParameters.PSobject.Properties["namespace"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "appliesTo" = ${AppliesTo}
            "defaultValue" = ${DefaultValue}
            "schemaElementKind" = ${SchemaElementKind}
            "namespace" = ${Namespace}
            "name" = ${Name}
        }

        return $PSO
    }

}

