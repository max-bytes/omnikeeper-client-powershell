#
# Landscape omnikeeper REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER SourceAttributeName
No description available.
.PARAMETER ColumnDescription
No description available.
.PARAMETER ValueType
No description available.
.PARAMETER WriteLayer
No description available.
.OUTPUTS

GridViewColumn<PSCustomObject>
#>

function Initialize-OKGridViewColumn {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SourceAttributeName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ColumnDescription},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ValueType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${WriteLayer}
    )

    Process {
        'Creating PSCustomObject: okclient => OKGridViewColumn' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "sourceAttributeName" = ${SourceAttributeName}
            "columnDescription" = ${ColumnDescription}
            "valueType" = ${ValueType}
            "writeLayer" = ${WriteLayer}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GridViewColumn<PSCustomObject>

.DESCRIPTION

Convert from JSON to GridViewColumn<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GridViewColumn<PSCustomObject>
#>
function ConvertFrom-OKJsonToGridViewColumn {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: okclient => OKGridViewColumn' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OKGridViewColumn
        $AllProperties = ("sourceAttributeName", "columnDescription", "valueType", "writeLayer")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceAttributeName"))) { #optional property not found
            $SourceAttributeName = $null
        } else {
            $SourceAttributeName = $JsonParameters.PSobject.Properties["sourceAttributeName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "columnDescription"))) { #optional property not found
            $ColumnDescription = $null
        } else {
            $ColumnDescription = $JsonParameters.PSobject.Properties["columnDescription"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "valueType"))) { #optional property not found
            $ValueType = $null
        } else {
            $ValueType = $JsonParameters.PSobject.Properties["valueType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "writeLayer"))) { #optional property not found
            $WriteLayer = $null
        } else {
            $WriteLayer = $JsonParameters.PSobject.Properties["writeLayer"].value
        }

        $PSO = [PSCustomObject]@{
            "sourceAttributeName" = ${SourceAttributeName}
            "columnDescription" = ${ColumnDescription}
            "valueType" = ${ValueType}
            "writeLayer" = ${WriteLayer}
        }

        return $PSO
    }

}

