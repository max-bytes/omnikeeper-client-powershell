#
# Landscape omnikeeper REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER SchemaElements
No description available.
.PARAMETER VocabularyAnnotations
No description available.
.PARAMETER ReferencedModels
No description available.
.PARAMETER DeclaredNamespaces
No description available.
.PARAMETER DirectValueAnnotationsManager
No description available.
.PARAMETER EntityContainer
No description available.
.OUTPUTS

IEdmModel<PSCustomObject>
#>

function Initialize-OKIEdmModel {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${SchemaElements},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${VocabularyAnnotations},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ReferencedModels},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${DeclaredNamespaces},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DirectValueAnnotationsManager},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${EntityContainer}
    )

    Process {
        'Creating PSCustomObject: okclient => OKIEdmModel' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "schemaElements" = ${SchemaElements}
            "vocabularyAnnotations" = ${VocabularyAnnotations}
            "referencedModels" = ${ReferencedModels}
            "declaredNamespaces" = ${DeclaredNamespaces}
            "directValueAnnotationsManager" = ${DirectValueAnnotationsManager}
            "entityContainer" = ${EntityContainer}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IEdmModel<PSCustomObject>

.DESCRIPTION

Convert from JSON to IEdmModel<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IEdmModel<PSCustomObject>
#>
function ConvertFrom-OKJsonToIEdmModel {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: okclient => OKIEdmModel' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OKIEdmModel
        $AllProperties = ("schemaElements", "vocabularyAnnotations", "referencedModels", "declaredNamespaces", "directValueAnnotationsManager", "entityContainer")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "schemaElements"))) { #optional property not found
            $SchemaElements = $null
        } else {
            $SchemaElements = $JsonParameters.PSobject.Properties["schemaElements"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vocabularyAnnotations"))) { #optional property not found
            $VocabularyAnnotations = $null
        } else {
            $VocabularyAnnotations = $JsonParameters.PSobject.Properties["vocabularyAnnotations"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "referencedModels"))) { #optional property not found
            $ReferencedModels = $null
        } else {
            $ReferencedModels = $JsonParameters.PSobject.Properties["referencedModels"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "declaredNamespaces"))) { #optional property not found
            $DeclaredNamespaces = $null
        } else {
            $DeclaredNamespaces = $JsonParameters.PSobject.Properties["declaredNamespaces"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "directValueAnnotationsManager"))) { #optional property not found
            $DirectValueAnnotationsManager = $null
        } else {
            $DirectValueAnnotationsManager = $JsonParameters.PSobject.Properties["directValueAnnotationsManager"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entityContainer"))) { #optional property not found
            $EntityContainer = $null
        } else {
            $EntityContainer = $JsonParameters.PSobject.Properties["entityContainer"].value
        }

        $PSO = [PSCustomObject]@{
            "schemaElements" = ${SchemaElements}
            "vocabularyAnnotations" = ${VocabularyAnnotations}
            "referencedModels" = ${ReferencedModels}
            "declaredNamespaces" = ${DeclaredNamespaces}
            "directValueAnnotationsManager" = ${DirectValueAnnotationsManager}
            "entityContainer" = ${EntityContainer}
        }

        return $PSO
    }

}

