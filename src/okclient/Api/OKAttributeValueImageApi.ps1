#
# Landscape omnikeeper REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Ciid
No description available.

.PARAMETER AttributeName
No description available.

.PARAMETER LayerIDs
No description available.

.PARAMETER Version
No description available.

.PARAMETER Index
No description available.

.PARAMETER AtTime
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-OKAttributeValueImageGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ciid},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AttributeName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LayerIDs},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Version},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Index},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${AtTime},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-OKAttributeValueImageGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-OKConfiguration
        $LocalVarUri = '/api/v{version}/AttributeValueImage'
        if (!$Version) {
            throw "Error! The required parameter `Version` missing when calling attributeValueImageGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{version}', [System.Web.HTTPUtility]::UrlEncode($Version))

        if (!$Ciid) {
            throw "Error! The required parameter `Ciid` missing when calling attributeValueImageGet."
        }
        $LocalVarQueryParameters['ciid'] = $Ciid

        if (!$AttributeName) {
            throw "Error! The required parameter `AttributeName` missing when calling attributeValueImageGet."
        }
        $LocalVarQueryParameters['attributeName'] = $AttributeName

        if (!$LayerIDs) {
            throw "Error! The required parameter `LayerIDs` missing when calling attributeValueImageGet."
        }
        $LocalVarQueryParameters['layerIDs'] = $LayerIDs

        if ($Index) {
            $LocalVarQueryParameters['index'] = $Index
        }

        if ($AtTime) {
            $LocalVarQueryParameters['atTime'] = $AtTime
        }



        $LocalVarResult = Invoke-OKApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Ciid
No description available.

.PARAMETER AttributeName
No description available.

.PARAMETER LayerID
No description available.

.PARAMETER Version
No description available.

.PARAMETER Files
No description available.

.PARAMETER ForceArray
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-OKAttributeValueImagePost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ciid},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AttributeName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${LayerID},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Version},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.IO.FileInfo[]]
        ${Files},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${ForceArray},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-OKAttributeValueImagePost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-OKConfiguration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('multipart/form-data')

        $LocalVarUri = '/api/v{version}/AttributeValueImage'
        if (!$Version) {
            throw "Error! The required parameter `Version` missing when calling attributeValueImagePost."
        }
        $LocalVarUri = $LocalVarUri.replace('{version}', [System.Web.HTTPUtility]::UrlEncode($Version))

        if (!$Ciid) {
            throw "Error! The required parameter `Ciid` missing when calling attributeValueImagePost."
        }
        $LocalVarQueryParameters['ciid'] = $Ciid

        if (!$AttributeName) {
            throw "Error! The required parameter `AttributeName` missing when calling attributeValueImagePost."
        }
        $LocalVarQueryParameters['attributeName'] = $AttributeName

        if (!$LayerID) {
            throw "Error! The required parameter `LayerID` missing when calling attributeValueImagePost."
        }
        $LocalVarQueryParameters['layerID'] = $LayerID

        if ($ForceArray) {
            $LocalVarQueryParameters['forceArray'] = $ForceArray
        }

        if (!$Files) {
            throw "Error! The required parameter `Files` missing when calling attributeValueImagePost."
        }
        $LocalVarFormParameters['files'] = $Files



        $LocalVarResult = Invoke-OKApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

